apply plugin: 'com.android.application'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

static def buildTime() {
    return new Date().format("yyyyMMdd");
}


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        applicationId build_versions.application_id

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode build_versions.version_code
        versionName build_versions.version_name

        flavorDimensions "versionCode"//多环境打包设置
//        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            // 设置支持的SO库架构（第三方腾讯bug上传含有多个SO库架构）
            abiFilters 'armeabi', 'x86', 'armeabi-v7a'
            //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        //打包时间
        resValue "string", "build_time", buildTime()
        //保留中文和英文国际化支持
        resConfigs "en", "zh"

        //resValue自定义资源
        resValue("string", "base_url", build_url.base_purang_shop_release)
    }

    //*******************打包设置开始
    //自定义生成的apk的地址及名称
    def apkName
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            //混淆
            minifyEnabled false
            // proguard-android.txt 表示 Android 系统为我们提供的默认混淆规则文件
            // proguard-rules.pro 则是我们想要自定义的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            debuggable false //禁止使用dug调试

            apkName = "release.apk"

            //签名
            signingConfig signingConfigs.release

            //resValue自定义资源
            resValue("string", "app_token", "${TOKEN}")
            resValue("bool","rel","true")
            resValue("integer","num","4")

            resValue "string", "base_url", build_url.base_purang_shop_release
        }

        debug {
            signingConfig signingConfigs.release
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            //manifestPlaceholders = [app_icon: "@drawable/launch_beta"]
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            debuggable true

            apkName = "debug.apk"

            resValue "string", "base_url", build_url.base_purang_shop_debug

            //resValue自定义资源
            resValue("string","app_token","${TOKEN}")
            resValue("bool","rel","true")
            resValue("integer","num","4")
        }


        debugUat {
            signingConfig signingConfigs.release
            debuggable true
            shrinkResources false
            resValue "string", "base_url", build_url.base_purang_shop_test

            apkName = "debugUat.apk"

            //resValue自定义资源
            resValue("string","app_token","${TOKEN}")
            resValue("bool","rel","true")
            resValue("integer","num","4")
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFileName.endsWith('.apk')) {
                //这里使用之前定义apk文件名称
                outputFileName = apkName
            }
        }
    }
    //*******************打包设置结束
    //*******************多环境打包设置开始
    productFlavors {
        //开发环境
        develop {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "1"
            applicationId 'com.example.elementdemo.develop'
            manifestPlaceholders = [
                    app_name: "DevelopDemo",
                    app_icon: "@drawable/icon_develop"
            ]
        }
        //测试环境
        check {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "2"
            applicationId 'com.example.elementdemo.check'
            manifestPlaceholders = [
                    app_name: "CheckDemo",
                    app_icon: "@drawable/icon_check"
            ]
        }
        //生产环境
        product {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "3"
            applicationId 'com.example.elementdemo.product'
            manifestPlaceholders = [
                    app_name: "ProductDemo",
                    app_icon: "@drawable/icon_product"
            ]
        }
    }
    //*******************多环境打包设置结束


        //代码混淆
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    //noinspection GradleCompatible
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':z_lib_common')
    if (!isModule.toBoolean()) {
        implementation project(':z_lib_main')
        implementation project(':z_lib_news')
        implementation project(':z_lib_girl')
    }
    //    butterknife 引用
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    implementation files('libs/acra-4.5.0.jar')

}
















