apply plugin: 'com.android.application'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
//配置秘钥
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

static def buildTime() {
    return new Date().format("yyyyMMdd");
}


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        applicationId build_versions.application_id

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode build_versions.version_code
        versionName build_versions.version_name

        flavorDimensions "versionCode"//多环境打包设置
        //添加多 dex分包支持
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            // 设置支持的SO库架构（第三方腾讯bug上传含有多个SO库架构）
            abiFilters 'armeabi', 'x86', 'armeabi-v7a'
            //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        //打包时间
        resValue "string", "build_time", buildTime()
        //保留中文和英文国际化支持
        resConfigs "en", "zh"

//        manifestPlaceholders = [
//                GETUI_APP_ID : "此处填写您的APP_ID",
//                GETUI_APP_KEY : "此处填写您的APP_KEY",
//                GETUI_APP_SECRET : "此处填写您的APP_SECRET"
//        ]

        //resValue自定义资源
//        resValue("string", "base_url", build_url.base_purang_shop_release)
    }

    /*****************************************打包设置开始**********************************************/
    //自定义生成的apk的地址及名称
    def apkName
    /**
     * 配置秘钥
     */
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            //混淆
            minifyEnabled false
            // proguard-android.txt 表示 Android 系统为我们提供的默认混淆规则文件
            // proguard-rules.pro 则是我们想要自定义的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            debuggable false //禁止使用dug调试

            apkName = "element.apk"

            //签名
            signingConfig signingConfigs.release

            //resValue自定义资源
            resValue("string", "app_token", "${TOKEN}")
            resValue("bool", "rel", "true")
            resValue("integer", "num", "4")

            resValue "string", "base_url", build_url.base_purang_shop_release
        }

        debug {
            signingConfig signingConfigs.release
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            //manifestPlaceholders = [app_icon: "@drawable/launch_beta"]
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            debuggable true

            apkName = "element.apk"

            resValue "string", "base_url", build_url.base_purang_shop_debug

            //resValue自定义资源
            resValue("string", "app_token", "${TOKEN}")
            resValue("bool", "rel", "true")
            resValue("integer", "num", "4")
        }


        debugUat {
            signingConfig signingConfigs.release
            //给applicationId添加后缀“.debugUat”
            applicationIdSuffix ".debugUat"
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            debuggable true
            shrinkResources false
            resValue "string", "base_url", build_url.base_purang_shop_test

            apkName = "element.apk"

            //resValue自定义资源
            resValue("string", "app_token", "${TOKEN}")
            resValue("bool", "rel", "true")
            resValue("integer", "num", "4")
        }
    }

    android.applicationVariants.all { variant ->
        def buildType = variant.buildType.name
        def productFlavor = variant.flavorName

        resValue "string", "app_client", rootProject.ext[productFlavor]["app_client"]
        resValue "string", "mall_base_url", rootProject.ext[productFlavor][buildType]
        resValue "string", "base_url", rootProject.ext[productFlavor][buildType]
        buildConfigField "String", "QQ_APPID", rootProject.ext[productFlavor]["qq_appid_app_key"]
        buildConfigField "String", "APP_ID", rootProject.ext[productFlavor]["app_id_app_key"]

        //配置参数信息 和 productFlavors中的不能同时存在
        if (buildType.contains("debug")) {
            variant.mergedFlavor.manifestPlaceholders = [app_name        : rootProject.ext[productFlavor]["app_name"],
                                                         app_icon        : rootProject.ext[productFlavor]["app_icon"],
                                                         app_package     : rootProject.ext[productFlavor]["application_package"],
                                                         "APP_ID"        : rootProject.ext[productFlavor]["app_id_app_key"],

                                                         GETUI_APP_ID    : rootProject.ext[productFlavor]["getui_app_id_debug"],
                                                         GETUI_APP_KEY   : rootProject.ext[productFlavor]["getui_app_key_debug"],
                                                         GETUI_APP_SECRET: rootProject.ext[productFlavor]["getui_app_secret_debug"],]
        } else {
            variant.mergedFlavor.manifestPlaceholders = [app_name        : rootProject.ext[productFlavor]["app_name"],
                                                         app_icon        : rootProject.ext[productFlavor]["app_icon"],
                                                         app_package     : rootProject.ext[productFlavor]["application_package"],
                                                         "APP_ID"        : rootProject.ext[productFlavor]["app_id_app_key"],

                                                         GETUI_APP_ID    : rootProject.ext[productFlavor]["getui_app_id_debug"],
                                                         GETUI_APP_KEY   : rootProject.ext[productFlavor]["getui_app_key_debug"],
                                                         GETUI_APP_SECRET: rootProject.ext[productFlavor]["getui_app_secret_debug"],]
        }

        variant.outputs.all {
            if (outputFileName.endsWith('.apk')) {
                //这里使用之前定义apk文件名称
                outputFileName = buildTime() + "_" + apkName
            }
        }
    }
    /************************************打包设置结束******************************************/

    /**********************************多环境打包设置开始******************************************/
    productFlavors {
        //开发环境
        develop {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "1"

            applicationId rootProject.ext["develop"]["application_id"]
            versionCode rootProject.ext["develop"]["version_code"]
            versionName rootProject.ext["develop"]["version_name"]
//            manifestPlaceholders = [
//                    app_name   : rootProject.ext["develop"]["app_name"],
//                    app_icon   : rootProject.ext["develop"]["app_icon"],
//                    "APP_ID"   : rootProject.ext["develop"]["app_id_app_key"],
//                    app_package: rootProject.ext["develop"]["application_package"],
//            ]
        }
        //测试环境
        check {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "2"

            applicationId rootProject.ext["check"]["application_id"]
            versionCode rootProject.ext["check"]["version_code"]
            versionName rootProject.ext["check"]["version_name"]
//            manifestPlaceholders = [
//                    app_name   : rootProject.ext["check"]["app_name"],
//                    app_icon   : rootProject.ext["check"]["app_icon"],
//                    "APP_ID"   : rootProject.ext["check"]["app_id_app_key"],
//                    app_package: rootProject.ext["check"]["application_package"],
//            ]
        }
        //生产环境
        product {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "3"
//            applicationId 'com.example.elementdemo.product'
            applicationId rootProject.ext["product"]["application_id"]
            versionCode rootProject.ext["product"]["version_code"]
            versionName rootProject.ext["product"]["version_name"]
//            manifestPlaceholders = [
//                    app_name   : "ProductDemo",
//                    app_icon   : "@drawable/icon_product",
//                    "APP_ID"   : rootProject.ext["product"]["app_id_app_key"],
//                    app_package: rootProject.ext["product"]["application_package"],
//            ]
        }
    }
    /**************************************多环境打包设置结束******************************************/

    /**
     * 目录指向配置
     */
//    sourceSets {
//        main {
//            manifest.srcFile 'src/main/AndroidManifest.xml'//指定AndroidManifest文件
//            java.srcDirs = ['src']//指定source目录
//            resources.srcDirs = ['src']//指定source目录
//            aidl.srcDirs = ['src']//指定source目录
//            renderscript.srcDirs =   [
//                    'src/main/res/layouts/layoutsCredit',
//                    'src/main/res/layouts/activities',
//                    'src/main/res/layouts/fragments',
//                    'src/main/res/layouts/widgets',
//                    'src/main/res/layouts/dialogs',
//                    'src/main/res/layouts/views',
//                    'src/main/res/layouts',
//                    'src/main/res'
//            ]//指定source目录
//            res.srcDirs = ['res']//指定资源目录
//            assets.srcDirs = ['assets']//指定assets目录
//            jniLibs.srcDirs = ['libs']//指定lib库目录
//        }
//        debug.setRoot('build-types/debug')//指定debug模式的路径
//        release.setRoot('build-types/release')//指定release模式的路径
//    }

    /**
     * 调用本地 和z_lib_girl 的 aar文件
     */
    repositories {
        //mavenLocal()
        //mavenCentral()
        flatDir {
            dirs 'libs', project(':moduleCore:z_lib_tools').file('libs')
        }
    }

    /**
     *  代码混淆
     */
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    /**
     * 添加多 dex分包支持 ,4.4系统上
     */
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
        additionalParameters += '--multi-dex'
        additionalParameters += '--set-max-idx-number=35000'
        //每个包内方法数上限（根据实际项目配置这个数，来适配4.0-4.4一些低端机型，因为拆分的dex太大，这些低端机型加载不了dex）
        additionalParameters += '--minimal-main-dex'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /**
     * 设置DataBinding状态为可用
     */
    dataBinding {
        enabled = true
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    //noinspection GradleCompatible
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':modulePublic:z_lib_common')
    implementation project(':z_lib_main')
    implementation project(path: ':moduleSystem:z_lib_base')
    if (!isModule.toBoolean()) {
        implementation project(':moduleCore:z_lib_news')
        implementation project(':moduleCore:z_lib_tools')
        implementation project(':moduleCore:z_lib_user')
        implementation project(':moduleCore:z_lib_datas')
        implementation project(path: ':moduleCore:z_lib_home')
    }
    //butterknife 引用
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    implementation files('libs/acra-4.5.0.jar')



}
















